---
# Create any virtual BMC interfaces
- name: Create virtual BMC
  shell: >
    {{ hostvars[kvmhost].result_vbmc_path.stdout }} add {{ inventory_hostname }}
    --libvirt-uri {{ hostvars[kvmhost].virt_infra_host_libvirt_url | default(virt_infra_host_libvirt_url) }}
    --port {{ virt_infra_vbmc_port }}
    --username {{ vbmc_user | default('admin') }}
    --password {{ vbmc_password | default('password') }}
  args:
    executable: /bin/bash
  become: true
  register: result_vbmc_create
  retries: 10
  delay: 2
  until: result_vbmc_create is succeeded
  when:
    - inventory_hostname not in groups['kvmhost']
    - virt_infra_state | default(virt_infra_state) != "undefined"
    - virt_infra_vbmc_port is defined and virt_infra_vbmc_port
    - hostvars[kvmhost].virt_infra_vbmc is defined and hostvars[kvmhost].virt_infra_vbmc or virt_infra_vbmc
    - hostvars[kvmhost].result_vbmc_list.stdout is defined and inventory_hostname not in hostvars[kvmhost].result_vbmc_list.stdout
  delegate_to: "{{ kvmhost }}"
  notify:
    - restart virtual bmc

- name: Start virtual BMC
  shell: "set -o pipefail && {{ hostvars[kvmhost].result_vbmc_path.stdout }} start {{ inventory_hostname }}"
  args:
    executable: /bin/bash
  become: true
  register: result_vbmc_start
  retries: 10
  delay: 2
  until: result_vbmc_start is succeeded
  changed_when: false
  when:
    - inventory_hostname not in groups['kvmhost']
    - virt_infra_state | default(virt_infra_state) != "undefined"
    - virt_infra_vbmc_port is defined and virt_infra_vbmc_port
    - hostvars[kvmhost].virt_infra_vbmc is defined and hostvars[kvmhost].virt_infra_vbmc or virt_infra_vbmc
  delegate_to: "{{ kvmhost }}"

- meta: flush_handlers
